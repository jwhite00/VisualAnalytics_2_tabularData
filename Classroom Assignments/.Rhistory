color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2 + scale_fill_discrete(name="cluster",
breaks=c("1", "2", "3"),
labels=c("Control", "Treatment 1", "Treatment 2"))
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2 + scale_fill_discrete(name="cluster",
breaks=c("1", "2", "3"),
labels=c("High Reward", "Treatment 1", "Treatment 2"))
library(openxlsx)
#load data
link="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndexAll.xlsx"
safe=read.xlsx(link)
#Descriptive Plugins
library(ggplot2)
library(psych)
library(ggrepel)
#Ineferential Plugins
library(dotwhisker)
library(broom)
library(dplyr)
library(cluster)
safeCopy=safe
resultPCA=principal(safeCopy[,-1], nfactors = 1, scores=T, normalize=T)
#get the new index
safeCopy$indexSafe=as.vector(factor.scores(safeCopy[,-1],resultPCA)$scores)
#rescale the index # pysch has its own 'rescale'
safeCopy$indexSafe=scales::rescale(safeCopy$indexSafe, to = c(1, 100))
safeCopy$RankSafe=rank(-safeCopy$indexSafe)
# IN/OUT
positionsIN=grep("_In_", colnames(safe) )
positionsOUT=grep("_Out_", colnames(safe) )
#
safeIN=safe[,c(1,positionsIN)]
safeOUT=safe[,c(1,positionsOUT)]
#get the rankings and composite indexes:
### IN
resultIN=principal(safeIN[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeIN$indexSafeIN=as.vector(factor.scores(safeIN[,-1],resultIN)$scores)
safeIN$indexSafeIN=scales::rescale(safeIN$indexSafeIN,
to = c(1, 100))
safeIN$RankSafeIN=rank(-safeIN$indexSafeIN)
### OUT
resultOUT=principal(safeOUT[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeOUT$indexSafeOUT=as.vector(factor.scores(safeOUT[,-1],resultOUT)$scores)
safeOUT$indexSafeOUT=scales::rescale(safeOUT$indexSafeOUT,
to = c(1, 100))
safeOUT$RankSafeOUT=rank(-safeOUT$indexSafeOUT)
#merge the results
safeIO=merge(safeIN,safeOUT)
set.seed(123)
distanceAmong <- dist(safe[,-1]) # euclidean distances between the rows
result <- cmdscale(distanceAmong,eig=TRUE, k=2) # k is the number of dim
# data frame prep:
dim1 <- result$points[,1]
dim2 <- result$points[,2]
coordinates=data.frame(dim1,dim2,city=safe$city)
# computing clusters
result <- kmeans(safeIO[,-c(1,25,26,53,54)], # not using composites just created
centers = 3) # how many clusters
# adding the cluster
safeIO$cluster=as.factor(result$cluster)
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2 + scale_fill_discrete(name="cluster",
breaks=c("1", "2", "3"),
labels=c("High Reward", "Treatment 1", "Treatment 2"))
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
names(pg)[names(pg)=="cluster"]  <- "Cluster Type"
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
names(safeIO)[names(safeIO)=="cluster"]  <- "Cluster Type"
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
library(openxlsx)
#load data
link="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndexAll.xlsx"
safe=read.xlsx(link)
#Descriptive Plugins
library(ggplot2)
library(psych)
library(ggrepel)
#Ineferential Plugins
library(dotwhisker)
library(broom)
library(dplyr)
library(cluster)
safeCopy=safe
resultPCA=principal(safeCopy[,-1], nfactors = 1, scores=T, normalize=T)
#get the new index
safeCopy$indexSafe=as.vector(factor.scores(safeCopy[,-1],resultPCA)$scores)
#rescale the index # pysch has its own 'rescale'
safeCopy$indexSafe=scales::rescale(safeCopy$indexSafe, to = c(1, 100))
safeCopy$RankSafe=rank(-safeCopy$indexSafe)
# IN/OUT
positionsIN=grep("_In_", colnames(safe) )
positionsOUT=grep("_Out_", colnames(safe) )
#
safeIN=safe[,c(1,positionsIN)]
safeOUT=safe[,c(1,positionsOUT)]
#get the rankings and composite indexes:
### IN
resultIN=principal(safeIN[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeIN$indexSafeIN=as.vector(factor.scores(safeIN[,-1],resultIN)$scores)
safeIN$indexSafeIN=scales::rescale(safeIN$indexSafeIN,
to = c(1, 100))
safeIN$RankSafeIN=rank(-safeIN$indexSafeIN)
### OUT
resultOUT=principal(safeOUT[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeOUT$indexSafeOUT=as.vector(factor.scores(safeOUT[,-1],resultOUT)$scores)
safeOUT$indexSafeOUT=scales::rescale(safeOUT$indexSafeOUT,
to = c(1, 100))
safeOUT$RankSafeOUT=rank(-safeOUT$indexSafeOUT)
#merge the results
safeIO=merge(safeIN,safeOUT)
set.seed(123)
distanceAmong <- dist(safe[,-1]) # euclidean distances between the rows
result <- cmdscale(distanceAmong,eig=TRUE, k=2) # k is the number of dim
# data frame prep:
dim1 <- result$points[,1]
dim2 <- result$points[,2]
coordinates=data.frame(dim1,dim2,city=safe$city)
# computing clusters
result <- kmeans(safeIO[,-c(1,25,26,53,54)], # not using composites just created
centers = 3) # how many clusters
# adding the cluster
safeIO$cluster=as.factor(result$cluster)
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
names(safeIO)[names(safeIO)=="cluster"]  <- "Cluster Type"
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
library(openxlsx)
#load data
link="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndexAll.xlsx"
safe=read.xlsx(link)
#Descriptive Plugins
library(ggplot2)
library(psych)
library(ggrepel)
#Ineferential Plugins
library(dotwhisker)
library(broom)
library(dplyr)
library(cluster)
library(openxlsx)
#load data
link="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndexAll.xlsx"
safe=read.xlsx(link)
#Descriptive Plugins
library(ggplot2)
library(psych)
library(ggrepel)
#Ineferential Plugins
library(dotwhisker)
library(broom)
library(dplyr)
library(cluster)
safeCopy=safe
resultPCA=principal(safeCopy[,-1], nfactors = 1, scores=T, normalize=T)
#get the new index
safeCopy$indexSafe=as.vector(factor.scores(safeCopy[,-1],resultPCA)$scores)
#rescale the index # pysch has its own 'rescale'
safeCopy$indexSafe=scales::rescale(safeCopy$indexSafe, to = c(1, 100))
safeCopy$RankSafe=rank(-safeCopy$indexSafe)
# IN/OUT
positionsIN=grep("_In_", colnames(safe) )
positionsOUT=grep("_Out_", colnames(safe) )
#
safeIN=safe[,c(1,positionsIN)]
safeOUT=safe[,c(1,positionsOUT)]
#get the rankings and composite indexes:
### IN
resultIN=principal(safeIN[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeIN$indexSafeIN=as.vector(factor.scores(safeIN[,-1],resultIN)$scores)
safeIN$indexSafeIN=scales::rescale(safeIN$indexSafeIN,
to = c(1, 100))
safeIN$RankSafeIN=rank(-safeIN$indexSafeIN)
### OUT
resultOUT=principal(safeOUT[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeOUT$indexSafeOUT=as.vector(factor.scores(safeOUT[,-1],resultOUT)$scores)
safeOUT$indexSafeOUT=scales::rescale(safeOUT$indexSafeOUT,
to = c(1, 100))
safeOUT$RankSafeOUT=rank(-safeOUT$indexSafeOUT)
#merge the results
safeIO=merge(safeIN,safeOUT)
set.seed(123)
distanceAmong <- dist(safe[,-1]) # euclidean distances between the rows
result <- cmdscale(distanceAmong,eig=TRUE, k=2) # k is the number of dim
# data frame prep:
dim1 <- result$points[,1]
dim2 <- result$points[,2]
coordinates=data.frame(dim1,dim2,city=safe$city)
# computing clusters
result <- kmeans(safeIO[,-c(1,25,26,53,54)], # not using composites just created
centers = 3) # how many clusters
# adding the cluster
safeIO$cluster=as.factor(result$cluster)
levels(safeIO$cluster)[levels(safeIO$cluster)=="1"] <- "High Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="2"] <- "Medium Reward"
levels(safeIO$cluster)[levels(safeIO$cluster)=="3"] <- "Low Reward"
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2
#data prep
cut=median(safe2$PERSONAL)
safe2$PERSONAL_bi=ifelse(safe2$PERSONAL>cut,
1,0)
library(margins)
margins_logit_PERSONAL = margins(logit_PERSONAL)
marginalSummary=summary(margins_logit_PERSONAL)
logit_PERSONAL = glm(PERSONAL_bi~ .,
data = safe2[,-c(1,5)],
family = "binomial")
digi=cplot(logit_PERSONAL, "HEALTH",draw = F)
#GGPLOT
base = ggplot(digi, aes(x = xvals))
p1= base + geom_ribbon(aes(ymin = lower, ymax = upper),
fill = "grey90")
p2 = p1 + geom_line(aes(y = yvals))
p3= p2 + labs(title="Effect of HEALTH index on PERSONAL index",
x= "HEALTH", y="Predicted Value")
p3 + theme_bw()
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking")
plot2
#ggplot
base <- ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city,
color = cluster))
plot1 = base + geom_point(na.rm=TRUE)
plot2 = plot1 + geom_text_repel(na.rm=TRUE,size=2) + labs(title="The Effects of City Spending on Safety", x="City Rank in Safety Spending", y="City Safety Ranking", subtitle = '0-Low Rank, 100-High Rank')
plot2
#data prep
cut=median(safe2$PERSONAL)
safe2$PERSONAL_bi=ifelse(safe2$PERSONAL>cut,
1,0)
library(margins)
margins_logit_PERSONAL = margins(logit_PERSONAL)
marginalSummary=summary(margins_logit_PERSONAL)
logit_PERSONAL = glm(PERSONAL_bi~ .,
data = safe2[,-c(1,5)],
family = "binomial")
digi=cplot(logit_PERSONAL, "HEALTH",draw = F)
#GGPLOT
base = ggplot(digi, aes(x = xvals))
p1= base + geom_ribbon(aes(ymin = lower, ymax = upper),
fill = "grey90")
p2 = p1 + geom_line(aes(y = yvals))
p3= p2 + labs(title="Effect of HEALTH index on PERSONAL index",
x= "HEALTH index", y="Predicted Effect on PERSONAL index")
p3 + theme_bw()
#data prep
cut=median(safe2$PERSONAL)
safe2$PERSONAL_bi=ifelse(safe2$PERSONAL>cut,
1,0)
library(margins)
margins_logit_PERSONAL = margins(logit_PERSONAL)
marginalSummary=summary(margins_logit_PERSONAL)
logit_PERSONAL = glm(PERSONAL_bi~ .,
data = safe2[,-c(1,5)],
family = "binomial")
digi=cplot(logit_PERSONAL, "HEALTH",draw = F)
#GGPLOT
base = ggplot(digi, aes(x = xvals))
p1= base + geom_ribbon(aes(ymin = lower, ymax = upper),
fill = "grey90")
p2 = p1 + geom_line(aes(y = yvals))
p3= p2 + labs(title="Estimated Effect of HEALTH index on PERSONAL index",
x= "HEALTH index", y="Predicted Effect on PERSONAL index")
p3 + theme_bw()
#data prep
cut=median(safe2$PERSONAL)
safe2$PERSONAL_bi=ifelse(safe2$PERSONAL>cut,
1,0)
library(margins)
margins_logit_PERSONAL = margins(logit_PERSONAL)
marginalSummary=summary(margins_logit_PERSONAL)
logit_PERSONAL = glm(PERSONAL_bi~ .,
data = safe2[,-c(1,5)],
family = "binomial")
digi=cplot(logit_PERSONAL, "HEALTH",draw = F)
#GGPLOT
base = ggplot(digi, aes(x = xvals))
p1= base + geom_ribbon(aes(ymin = lower, ymax = upper),
fill = "grey90")
p2 = p1 + geom_line(aes(y = yvals))
p3= p2 + labs(title="Estimated Effect of City's HEALTH index on PERSONAL index",
x= "HEALTH index", y="Predicted Effect on PERSONAL index")
p3 + theme_bw()
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
#data prep
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C=as.data.frame(CrimeCol)
names(df.C)=c('Crime','Daytime','Percent')
#data prep
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C=as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
#data prep
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C=as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
#data prep
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C=as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
#data prep
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C=as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
#data prep
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C<-as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
CrimeCol<-table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C<-as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
CrimeCol<-table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2) %>%   # 2 is % by column
"*"(100)%>%
round(3)
df.C<-as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
CrimeCol=table(crime$crimecat,crime$Occurred.DayTime)%>%
prop.table(margin = 2)%>%
"*"(100)%>%
round(3)
df.C=as.data.frame(CrimeCol)
colnames(df.C)=c('Crime','Daytime','Percent')
#ggplot
base  = ggplot(df.C, aes(x = reorder(Crime, Percent), y = Percent ) )
lolliplot1=base + geom_segment(aes(y = 0,
x = reorder (Crime, Percent),
yend = Percent,
xend = Crime), color = "grey50")
lolliplot2 = lolliplot1 + geom_point() + labs(title='What Crimes Are Being Committed, \nand When?', x ='Crime Type',  y = '%', caption = 'City of Seattle: Open Data Portal')
lolliplot3 = lolliplot2 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),plot.caption = element_text(hjust = 0),  plot.title = element_text(hjust = 0.5), axis.text.y = element_text(size=5.5, angle=30))
lolliplot4 = lolliplot3 + facet_wrap( ~ Daytime ,nrow = 1) + coord_flip()
lolliplot4
